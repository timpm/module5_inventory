import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
public class raytest
{
	
	/*----------------------
	 * Method srSting  checks if the user input "value" is equal to an element in the 2d array.
	 * 
	 * Preconditions: The user input, value as a string.
	 * 				  The 2d array element, inray, as a string.
	 * 
	 * Postconditions: Returns true or false
	 *-----------------------
	 */

   public static boolean srString(String value, String inray)
   {
	   String testcase = inray.trim().replace("_"," ");
	   return (value.equalsIgnoreCase(testcase.toLowerCase())); 
   }

   /*-----------------------------------------------
     *Method srInteger checks if the user input "value" is equal to, greater than, or less than to an element in the 2d array.
	 * This is done by converting the integer to a string using the String,valueOf(Int) function.
	 * Preconditions: The user input, value as an integer.
	 * 				  The comparator, comp, as a string.
	 * 				  The 2d array element, inray, as a string.
	 * 
	 * Postconditions: Returns true or false
    * -------------------------------------------------
    */
   public static boolean srInteger(int value, String comp, String inray)
   {
	   boolean out= false;
	  	 if (comp.equals("=")) 
		 {//if integer is equal to value you are searching for returns true
			String testcase = inray.trim(); 
	      out= (String.valueOf(value).equalsIgnoreCase(testcase.toLowerCase()));
		 }
		 if (comp.equals("<"))
		 {
			 String testcase = inray.trim();
			 out=( Integer.parseInt(testcase)< value);
		 }
		 if (comp.equals(">"))
		 {
			 String testcase = inray.trim();
			out =( Integer.parseInt(testcase)> value);
		 }
		 return out;
	   }
	 /*------------------------
	  * The method inventoryHeaders returns a string of preset values for the body
	  * Preconditions: None
	  * 
	  * Postconditions: The string s, which contains the headers.
	  * ---------------------------
	  */
	   public static String[] inventoryHeaders()
	   {
		   String s[] ={"Make","Model","Year","Condition","Mileage","Price"," VIN"};
		   return s;
	   }
	 /*---------------------------------------
	  * The method autoPrint is used to print a full 2d array.
	  * This is performed by printing each column in the first row 
	  * then moves to the second row and repeats until there are no more rows
	  * 
	  * Precondition: The 2d array, String [][]args, can be of any length and width
	  * 
	  * 
	  */
	   public static void autoPrint(String [][]args)
	   {
	   for (int n = 0; n < args.length; n++ )
	   {// The outer loop controls the position of row
		   for ( int i = 0; i < args[0].length; i++)
		   {//The inner loop controls the position of the column 
			   System.out.print(args[n][i] + "\t");
		   }
		   System.out.println("");
	   }
	   }
	 /*
	  * Print a row from a 2d array
	  */
	   public static void printRow(int r, String[][] args)
	   {
		   for (int n = 0; n< args[0].length ;n++ )
		   {
			   System.out.print(args[r][n].trim() + "      \t");
		   }
		   System.out.println("");
	   }
	   
	   /*
	    * Print array takes in a string and prints out it's elements
	    */
	   public static void printArray(String[]args)
	   {
		   for (int n = 0; n < args.length ; n++)
		   {
			   System.out.print(args[n].trim() + "      \t");
		   }
		   System.out.println("");
				   
	   }
	   
	   /*
		* print line seperaters for headers
		*/
		public static void printHyphens(String[] args)
		{
			for (int i = 0; i < args.length; i++ )
			{
				for (int n =0; n < args[i].length(); n++)
				{
					System.out.print("-");
				}
				System.out.print("     \t");
			}
			System.out.println();   
		}	
	/*
	 * Method body makes a2d array based on the first line in file and further processes user input based on input choice.
	 * Body uses the methods srString and srInteger to search the elements within the 2d array, it then uses the method printrow
	 * to print out the rows of the corresponding element which is matched. This method also uses autoprint to display the full 2d array,
	 * inventoryhearders, printhyphens and printarray for visualization optimizations.
	 * 
	 * Preconditions: 	The String, args, which should be the text file to process
	 * 					Integer, choice, which is the user input choice.
	 * 					Uses methods srString, srInteger, autoPrint, printRow, inventoryHeaders, printHyphens and printArray
	 * 
	 * 
	 * 
	 * 
	 */
	public static void body(int choice, String[] args)
	{//srsparameter is a sub choice to match the user search parameters
		int srparameter= choice - 1;
		String invalue = "";
		int invalue2 = 0;
		String invalue3 ="";
		Scanner input = new Scanner(System.in);
		 if(srparameter ==2 || srparameter==4 || srparameter ==5)
		 {//if search parameter involves an integer extra input is needed
			 System.out.print("Enter search integer:");
			 invalue2 = input.nextInt();
			 System.out.print("Enter value [=, > or <]:");
			 invalue3 = input.next();
		 }
 		 else if (choice !=0)
		 {
			System.out.print("Enter search term:");
			invalue = input.nextLine();
		 }
		 //Headers and hyphens for visualization
		 printArray(inventoryHeaders());
		 printHyphens(inventoryHeaders());
		 
		try
		{//makes a 2d array and fills in data from file in args
			Scanner inventoryFile = new Scanner(new File(args[0]));
			String fline=inventoryFile.nextLine();//reads the first line
			String fray[]=fline.split(" ");//splits the string based on space
			int row=Integer.parseInt(fray[0]);//converts the string to an integer
			int col=Integer.parseInt(fray[1]);
			String master[][]=new String[row][col];//creates a 2d array based on values from the first line
			
			for (int n = 0 ; n < master.length; n++ )
				{//outer loop that controls location of the row in the 2d array
				
					String inline=inventoryFile.nextLine();//reads in the next line from file
					// splits the string based on the delimiter ";" and assigns it to array sub_master
					String sub_master[]=inline.split(";");
					for (int m = 0; m < col; m++ )
						{//inner loop that controls location of column in the 2d array
						//assigns an element of sub_master to an element in the 2d array  
						master[n][m]= sub_master[m]; 
						//repeats until row is full
						}
				}
			//------------------------------------------------------
			
			int count = 0;//initialize counter to count records
			if (choice==0)
			{// if user wanted to view all records prints all records in 2d array
				autoPrint(master);
			}
				
			switch(srparameter)
     		{//if search choice is a string
     		case 0:case 1: case 3: case 6:
     		{
     			for (int j =0; j < master.length; j++)
     			{
     				if(srString(invalue,master[j][srparameter]))
     					{
     					printRow(j, master);
     					count++;
     					}
     			}
     			System.out.println(count + " records found");
     			break;
     		}	
     		//if search choice is an integer	
     		case 2:case 4: case 5:
     		{
     			for (int j =0; j < master.length; j++)
     			{
     				if(srInteger(invalue2, invalue3,master[j][srparameter] ))
     				{
     					printRow(j,master);
     					count++;
     				}
     			}
     			System.out.println(count + " records found");
     			break;
     		}
					
     		}
		}
			catch(FileNotFoundException except)
			{
			 System.out.println("Error: Inventory read failure. Error: " + except.getMessage());
			 System.exit(-1);
			
			}
				
	}
	
	/*
	 * inValue prompts the user for instructions
	 */
	public static int inValue (String[] args)
	{
		int command = 0 ;
		do{
			System.out.println("-----------------------------------------------------------");
			System.out.println("Available commands, please type the coressponding number");
			System.out.println("Display Inventory[0]\nSearch[1]\nExit System[-1]\n");
			System.out.print("Command:");
			Scanner input = new Scanner ( System.in );
			command = input.nextInt();
			
			
			if (command==0)
			{//display inventory
				body( command, args);
			}
			if (command==1)
			{
				
				System.out.println("Searchable fields");
				System.out.println("Make[0]\nModel[1]\nYear[2]\nCondition[3]\nMileage[4]\nPrice[5]\nVin[6]");
				System.out.print("Command or type -1 to exit:");
				command = input.nextInt();
				if (command == -1)
				{
					break;
				}
				body( (command +1 ) , args);
			
			}
			}while( command!=-1);
		
		return command;
	}
	/*
	 * main 
	 */
	public static  void main(String[] args)
	{
		inValue(args);
	}

}
